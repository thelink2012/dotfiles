#!/usr/bin/env python3
"""
    So, audio handling is too complicated in Linux... Thus I made my own 
    controller which only works for me :)
"""
import sys
import os
import subprocess


class Sink:
    def __init__(self, index):
        self.index = index
        self.volume = None
        self.mute = None

    @staticmethod
    def list_sinks():
        sinks = []
        resp = subprocess.run(['pactl', 'list', 'sinks'], 
                              stdout=subprocess.PIPE,
                              encoding='utf8')
        resp.check_returncode()

        current_sink = None
        for line in resp.stdout.split('\n'):
            line = line.strip()
            if line.startswith('Sink #'):
                tokens = line.split()
                sink_index = int(tokens[1][1:])
                current_sink = Sink(sink_index)
                sinks.append(current_sink)
            elif line.startswith('Mute:'):
                rest_of_line = line.split(':', maxsplit=1)[1]
                rest_of_line = rest_of_line.strip()
                assert rest_of_line in ('yes', 'no')
                current_sink.mute = (rest_of_line == 'yes')
            elif line.startswith('Volume:'):
                rest_of_line = line.split(':', maxsplit=1)[1]
                channels = [t.strip() for t in rest_of_line.split(',')]
                for channel in channels:
                    chname, chinfo = channel.split(':', maxsplit=1)
                    volumes = [c.strip() for c in chinfo.split('/')]
                    percent = next(v for v in volumes if v.endswith('%'))
                    percent = int(percent[:-1])
                    current_sink.volume = percent

        return sinks

    def set_volume(self, volume):
        if isinstance(volume, int):
            volume = str(volume) + '%'
        resp = subprocess.run(['pactl', 'set-sink-volume',
                               str(self.index), str(volume)], 
                              stdout=subprocess.PIPE,
                              encoding='utf8')
        print(str(self.index), str(volume))
        resp.check_returncode()
        self.volume = None

    def set_mute(self, mute):
        assert mute in (True, False)
        resp = subprocess.run(['pactl', 'set-sink-mute',
                               str(self.index), '1' if mute else '0'], 
                              stdout=subprocess.PIPE,
                              encoding='utf8')
        resp.check_returncode()
        self.mute = mute


def main_set_volume(arg_volume):
    sinks = Sink.list_sinks()
    if len(sinks) > 0:
        base_volume = sinks[0].volume

        # Sync the volume of all sinks
        for sink in sinks:
            if sink.volume != base_volume:
                sink.set_volume(base_volume)

        # Then update all sinks volume.
        for sink in sinks:
            sink.set_volume(arg_volume)


def main_mute(arg_mute):
    sinks = Sink.list_sinks()

    if arg_mute == 'toggle':
        # Sync all the sinks.
        if len(sinks) > 0:
            base_mute = sinks[0].mute
            next_mute = not base_mute
            for sink in sinks:
                if sink.mute != base_mute:
                    sink.set_mute(base_mute)
    elif arg_mute == '1':
        next_mute = True
    elif arg_mute == '0':
        next_mute = False
    else:
        raise NotImplementedError

    # Then set the mute state of all of them.
    for sink in sinks:
        sink.set_mute(next_mute)


def main():
    os.environ.update({'LANG': 'C'})
    command = sys.argv[1]

    if command == 'set-volume':
        main_set_volume(sys.argv[2])
    elif command == 'mute':
        main_mute(sys.argv[2])
    else:
        raise NotImplementedError


if __name__ == '__main__':
    main()
